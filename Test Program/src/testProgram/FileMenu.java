package testProgram;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

import programSteps.*;
import vectorEditor.*;

@SuppressWarnings("serial")
public class FileMenu extends JMenu {
	
	private File path = null;
	private static JFileChooser chooser = new JFileChooser();
	private static FileNameExtensionFilter filter = new FileNameExtensionFilter("Project Files", "prj");

	public FileMenu() {
		chooser.setFileFilter(filter);
		
		this.setText("File");

		JMenuItem save = new JMenuItem("Save");
		save.addActionListener(new FileMenuListener());
		this.add(save);

		JMenuItem saveAs = new JMenuItem("Save As...");
		saveAs.addActionListener(new FileMenuListener());
		this.add(saveAs);

		JMenuItem open = new JMenuItem("Open");
		open.addActionListener(new FileMenuListener());
		this.add(open);

		JMenuItem exit = new JMenuItem("Exit");
		exit.addActionListener(new FileMenuListener());
		this.add(exit);
	}

	private class FileMenuListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent arg0) {
			JMenuItem source = (JMenuItem) arg0.getSource();
			
			if(source.getText().equals("Save")) {
				if(!(path == null) && path.exists())
					generateSaveFile(path);
				else {
					int returnVal = getSaveLocation();
					if(returnVal == 0)
						returnVal = generateSaveFile(path);
					else if(returnVal == 1)
						JOptionPane.showMessageDialog(getParent(), "Error saving file!", "File Save Error", JOptionPane.ERROR_MESSAGE);
				}
			}
			else if(source.getText().equals("Save As...")) {
				int returnVal = getSaveLocation();
				if(returnVal == 0)
					returnVal = generateSaveFile(path);
				else if(returnVal == 1)
					JOptionPane.showMessageDialog(getParent(), "Error saving file!", "File Save Error", JOptionPane.ERROR_MESSAGE);
			}
			else if(source.getText().equals("Open")) {
				int returnVal = getOpenLocation();
				if(returnVal == 0)
					openSelectedFile(path);
				else if(returnVal == 1)
					JOptionPane.showMessageDialog(getParent(), "Error opening file!", "File Open Error", JOptionPane.ERROR_MESSAGE);
			}
			else if (source.getText().equals("Exit"))
				((JFrame) ((JRootPane) ((JLayeredPane) ((JMenuBar) ((FileMenu) ((JPopupMenu) source.getParent()).getInvoker()).getParent()).getParent()).getParent()).getParent()).dispose();
		}
	}
	
	@SuppressWarnings("unchecked")
	public int generateSaveFile(File path) {
		try {
			FileWriter output = new FileWriter(path);
			output.write("<Generated By>ATE Simulator</Generated By>\n");
			output.write("<Project>\n");
			output.write("\t<Part>" + Main.getPart() + "</Part>\n");
			output.write("\t<Test>" + Main.getTest() + "</Test>\n");
			if(Main.programSteps.getTabCount() > 1)
			{
				output.write("\t<Steps>\n");
				for(int tab = 0; tab < Main.programSteps.getTabCount() - 1; tab++)
				{
					output.write("\t\t<Step>\n");
					//Main.programSteps.getTabComponentAt(tab);
					String type = (String) ((ProgramStepPanel) Main.programSteps.getComponentAt(tab)).stepType.getSelectedItem();
					output.write("\t\t\t<Type>" + type + "</Type>\n");

					switch(type) {
					case "Close Relays":
						CloseRelaysPanel closePanel = (CloseRelaysPanel) ((ProgramStepPanel) Main.programSteps.getComponentAt(tab)).getComponent(1);
						output.write("\t\t\t<RC1>");
						if(((JCheckBox) closePanel.getComponent(0)).isSelected())
							output.write("true");
						else
							output.write("false");
						output.write("</RC1>\n\t\t\t<RC2>");
						if(((JCheckBox) closePanel.getComponent(1)).isSelected())
							output.write("true");
						else
							output.write("false");
						output.write("</RC2>\n\t\t\t<RC3>");
						if(((JCheckBox) closePanel.getComponent(2)).isSelected())
							output.write("true");
						else
							output.write("false");
						output.write("</RC3>\n");
						break;
					case "Datalog":
						DatalogPanel dataPanel = (DatalogPanel) ((ProgramStepPanel) Main.programSteps.getComponentAt(tab)).getComponent(1);
						output.write("\t\t\t<whatVariable>" + ((JTextField) dataPanel.getComponent(0)).getText() + "</whatVariable>\n");
						break;
					case "Math":
						MathPanel mathPanel = (MathPanel) ((ProgramStepPanel) Main.programSteps.getComponentAt(tab)).getComponent(1);
						output.write("\t\t\t<math>" + ((JTextField) mathPanel.getComponent(0)).getText() + "</math>\n");
						break;
					case "Measure Current":
						MeasureCurrentPanel measCurrPanel = (MeasureCurrentPanel) ((ProgramStepPanel) Main.programSteps.getComponentAt(tab)).getComponent(1);
						output.write("\t\t\t<numberOfSamplesC>" + ((JTextField) measCurrPanel.getComponent(0)).getText() + "</numberOfSamplesC>\n");
						output.write("\t\t\t<timeBetweenSamplesC>" + ((JTextField) measCurrPanel.getComponent(1)).getText() + "</timeBetweenSamplesC>\n");
						output.write("\t\t\t<variableNameC>" + ((JTextField) measCurrPanel.getComponent(2)).getText() + "</variableNameC>\n");
						break;
					case "Measure Voltage":
						MeasureVoltagePanel measVoltPanel = (MeasureVoltagePanel) ((ProgramStepPanel) Main.programSteps.getComponentAt(tab)).getComponent(1);
						output.write("\t\t\t<numberOfSamplesV>" + ((JTextField) measVoltPanel.getComponent(0)).getText() + "</numberOfSamplesV>\n");
						output.write("\t\t\t<timeBetweenSamplesV>" + ((JTextField) measVoltPanel.getComponent(1)).getText() + "</timeBetweenSamplesV>\n");
						output.write("\t\t\t<variableNameV>" + ((JTextField) measVoltPanel.getComponent(2)).getText() + "</variableNameV>\n");
						break;
					case "Open Relays":
						OpenRelaysPanel openPanel = (OpenRelaysPanel) ((ProgramStepPanel) Main.programSteps.getComponentAt(tab)).getComponent(1);
						output.write("\t\t\t<RO1>");;
						if(((JCheckBox) openPanel.getComponent(0)).isSelected())
							output.write("true");
						else
							output.write("false");
						output.write("</RO1>\n\t\t\t<RO2>");
						if(((JCheckBox) openPanel.getComponent(1)).isSelected())
							output.write("true");
						else
							output.write("false");
						output.write("</RO2>\n\t\t\t<RO3>");
						if(((JCheckBox) openPanel.getComponent(2)).isSelected())
							output.write("true");
						else
							output.write("false");
						output.write("</RO3>\n");
						break;
					case "Set Current":
						SetCurrentPanel setCurrPanel = (SetCurrentPanel) ((ProgramStepPanel) Main.programSteps.getComponentAt(tab)).getComponent(1);
						output.write("\t\t\t<whereC>" + ((JTextField) setCurrPanel.getComponent(0)).getText() + "</whereC>\n");
						output.write("\t\t\t<Current>" + ((JTextField) setCurrPanel.getComponent(1)).getText() + "</Current>\n");
						output.write("\t\t\t<voltageRangeC>" + ((JComboBox<String>) setCurrPanel.getComponent(2)).getSelectedItem() + "</voltageRangeC>\n");
						output.write("\t\t\t<currentRangeC>" + ((JComboBox<String>) setCurrPanel.getComponent(3)).getSelectedItem() + "</currentRangeC>\n");
						break;
					case "Set Voltage":
						SetVoltagePanel setVoltPanel = (SetVoltagePanel) ((ProgramStepPanel) Main.programSteps.getComponentAt(tab)).getComponent(1);
						output.write("\t\t\t<whereV>" + ((JTextField) setVoltPanel.getComponent(0)).getText() + "</whereV>\n");
						output.write("\t\t\t<Voltage>" + ((JTextField) setVoltPanel.getComponent(1)).getText() + "</Voltage>\n");
						output.write("\t\t\t<voltageRangeV>" + ((JComboBox<String>) setVoltPanel.getComponent(2)).getSelectedItem() + "</voltageRangeV>\n");
						output.write("\t\t\t<currentRangeC>" + ((JComboBox<String>) setVoltPanel.getComponent(3)).getSelectedItem() + "</currentRangeC>\n");
						break;
					case "Turn Off Resources":
						TurnOffResourcesPanel resPanel = (TurnOffResourcesPanel) ((ProgramStepPanel) Main.programSteps.getComponentAt(tab)).getComponent(1);
						output.write("\t\t\t<cS>");
						if(((JCheckBox) resPanel.getComponent(0)).isSelected())
							output.write("true");
						else
							output.write("false");
						output.write("</cS>\n\t\t\t<vS>");
						if(((JCheckBox) resPanel.getComponent(1)).isSelected())
							output.write("true");
						else
							output.write("false");
						output.write("</vS>\n");
						break;
					case "Wait":
						WaitPanel waitPanel = (WaitPanel) ((ProgramStepPanel) Main.programSteps.getComponentAt(tab)).getComponent(1);
						output.write("\t\t\t<Wait>" + ((JComboBox<String>) waitPanel.getComponent(0)).getSelectedItem() + "</Wait>\n");
						break;
					}
					output.write("\t\t</Step>\n");
				}
				output.write("\t</Steps>\n");
			}
			output.write("</Project>\n\n");
			
			output.write("<Vec Edit>\n");
			if(Main.vecEdit.sheets.getTabCount() > 1) {
				output.write("\t<Sheets>\n");
				for(int sheet = 0; sheet < Main.vecEdit.sheets.getTabCount() - 1; sheet++)
				{
					output.write("\t\t<Sheet>\n");
					output.write("\t\t\t<Name>" + ((JTextField) ((JPanel) Main.vecEdit.sheets.getTabComponentAt(sheet)).getComponent(0)).getText() + "</Name>\n");
					
					JTable vecSheet = (JTable) ((JViewport) ((JScrollPane) Main.vecEdit.sheets.getComponentAt(sheet)).getComponent(0)).getComponent(0);
					
					output.write("\t\t\t<Headers>\n");
					for(int col = 0; col < vecSheet.getColumnCount(); col++) {
						output.write("\t\t\t\t<Header>" + vecSheet.getColumnName(col) + "</Header>\n");
					}
					output.write("\t\t\t</Headers>\n");

					output.write("\t\t\t<Rows>\n");
					for(int row = 0; row < vecSheet.getRowCount(); row++) {
						output.write("\t\t\t\t<Row>\n");
						for(int col = 0; col < vecSheet.getColumnCount(); col++) {
							switch(col) {
							case 0:
								output.write("\t\t\t\t\t<Number>" + vecSheet.getValueAt(row, col) + "</Number>\n");
								break;
							case 1:
								output.write("\t\t\t\t\t<Capture>" + vecSheet.getValueAt(row, col) + "</Capture>\n");
								break;
							case 2:
								output.write("\t\t\t\t\t<Function>" + vecSheet.getValueAt(row, col) + "</Function>\n");
								break;
							default:
								output.write("\t\t\t\t\t<Pin Value>" + vecSheet.getValueAt(row, col) + "</Pin Value>\n");
								break;
							}
						}
						output.write("\t\t\t\t</Row>\n");
					}
					output.write("\t\t\t</Rows>\n");
					output.write("\t\t</Sheet>\n");
				}
				output.write("\t</Sheets>\n");
			}
			output.write("</Vec Edit>\n");
			output.flush();
			output.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return 0;
	}
	
	public int getSaveLocation() {
		int returnVal = chooser.showSaveDialog(getParent());
		if(returnVal == JFileChooser.APPROVE_OPTION) {
			path = chooser.getSelectedFile();
			if(path.getName().indexOf(".prj") == -1)
				path = new File(path.getPath() + ".prj");
			if(path.exists()) {
				returnVal = JOptionPane.showConfirmDialog(getParent(), "Selected file already exists, is it okay to overwrite?", "Confirm Overwrite", JOptionPane.YES_NO_OPTION);
				if(returnVal == JOptionPane.YES_OPTION)
					return 0;
				else
					return getSaveLocation();
			}
			else
				return 0;
		}
		else if(returnVal == JFileChooser.CANCEL_OPTION)
			return -1;
		return 1;
	}
	
	public int getOpenLocation() {
		int returnVal = chooser.showOpenDialog(getParent());
		if(returnVal == JFileChooser.APPROVE_OPTION) {
			path = chooser.getSelectedFile();
			return 0;
		}
		else if(returnVal == JFileChooser.CANCEL_OPTION)
			return -1;
		return 1;
	}
	
	public void openSelectedFile(File open)
	{
		String line = "";
		try {
			FileReader input = new FileReader(open);
			line = readLine(input);
			if(!line.contains("<Generated By>") || !line.contains("</Generated By>") || !line.contains("ATE Simulator")) {
				JOptionPane.showMessageDialog(getParent(), "Error opening file.  The selected file is not an ATE Simulator project file.", "File Open Error", JOptionPane.ERROR_MESSAGE);
				path = null;
				return;
			}
			line = readLine(input);
			while(!line.contains("</Project>")) {
				line = readLine(input);
				if(line.contains("<Part>") && line.contains("</Part>")) {
					Main.setPart(line.substring(line.indexOf('>') + 1, line.indexOf("</")).trim());
				}
				else if(line.contains("<Test>") && line.contains("</Test>")) {
					Main.setTest(line.substring(line.indexOf('>') + 1, line.indexOf("</")).trim());
				}
				else if(line.contains("<Steps>")) {
					line = readLine(input);
					while(!line.contains("</Steps>")) {
						if(line.contains("<Step>")) {
							ProgramStepPanel step = new ProgramStepPanel(Main.programSteps.getTabCount());
							ArrayList<String> lines = new ArrayList<String>();
							line = readLine(input);
							while(!line.contains("</Step>")) {
								lines.add(line.substring(line.indexOf('>') + 1, line.indexOf("</")));
								line = readLine(input);
							}
							switch(lines.get(0)) {
								case "Close Relays":
									step.setType("Close Relays");
									lines.remove(0);
									step.add(new CloseRelaysPanel(lines));
									break;
								case "Open Relays":
									step.setType("Open Relays");
									lines.remove(0);
									step.add(new OpenRelaysPanel(lines));
									break;
								case "Set Voltage":
									step.setType("Set Voltage");
									lines.remove(0);
									step.add(new SetVoltagePanel(lines));
									break;
								case "Set Current":
									step.setType("Set Current");
									lines.remove(0);
									step.add(new SetCurrentPanel(lines));
									break;
								case "Wait":
									step.setType("Wait");
									lines.remove(0);
									step.add(new WaitPanel(lines));
									break;
								case "Measure Voltage":
									step.setType("Measure Voltage");
									lines.remove(0);
									step.add(new MeasureVoltagePanel(lines));
									break;
								case "Measure Current":
									step.setType("Measure Current");
									lines.remove(0);
									step.add(new MeasureCurrentPanel(lines));
									break;
								case "Math":
									step.setType("Math");
									lines.remove(0);
									step.add(new MathPanel(lines));
									break;
								case "Datalog":
									step.setType("Datalog");
									lines.remove(0);
									step.add(new DatalogPanel(lines));
									break;
								case "Turn Off Resources":
									step.setType("Turn Off Resources");
									lines.remove(0);
									step.add(new TurnOffResourcesPanel(lines));
									break;
								default:
									break;
							}
							Main.programSteps.insertTab("Step " + Main.programSteps.getTabCount(), null, step, null, Main.programSteps.getTabCount() - 1);
						}
						line = readLine(input);
					}
					Main.programSteps.setSelectedIndex(0);
				}
			}
			line = readLine(input);
			line = readLine(input);
			if(line.contains("<Vec Edit>")) {
				Main.vecEdit = new VectorEditor();
				while(!line.contains("</Vec Edit>")) {
					if(line.contains("<Sheets>")) {
						ArrayList<String> headers;
						ArrayList<Row> data;
						String name;
						line = readLine(input);
						while(!line.contains("</Sheets>")) {
							if(line.contains("<Sheet>")) {
								headers = new ArrayList<String>();
								data = new ArrayList<Row>();
								name = "";
								while(!line.contains("</Sheet>")) {
									if(line.contains("<Name>") && line.contains("</Name>")) {
										name = line.substring(line.indexOf('>') + 1, line.indexOf("</"));
									}
									else if(line.contains("<Headers>")) {
										line = readLine(input);
										while(!line.contains("</Headers>")) {
											headers.add(line.substring(line.indexOf('>') + 1, line.indexOf("</")));
											line = readLine(input);
										}
									}
									else if(line.contains("<Rows>")) {
										line = readLine(input);
										while(!line.contains("</Rows>")) {
											if(line.contains("<Row>")) {
												Row r = new Row();
												line = readLine(input);
												while(!line.contains("</Row>")) {
													if(line.contains("<Number>") && line.contains("</Number>"))
														r.step = Integer.parseInt(line.substring(line.indexOf('>') + 1, line.indexOf("</")));
													else if(line.contains("<Capture>") && line.contains("</Capture>"))
														r.capture = Boolean.parseBoolean(line.substring(line.indexOf('>') + 1, line.indexOf("</")));
													else if(line.contains("<Function>") && line.contains("</Function>"))
														r.function = line.substring(line.indexOf('>') + 1, line.indexOf("</"));
													else if(line.contains("<Pin Value>") && line.contains("</Pin Value>"))
														r.vector.add(new Integer(line.substring(line.indexOf('>') + 1, line.indexOf("</"))));
													line = readLine(input);
												}
												data.add(r);
											}
											line = readLine(input);
										}
									}
									line = readLine(input);
								}
								Main.vecEdit.sheets.insertTab(null, null, new JScrollPane(new JTable(new VectorTableModel(headers, data))), null, Main.vecEdit.sheets.getTabCount() - 1);
								
								JPanel titlePanel = new JPanel();
								JTextField titleField = new JTextField(name);
								titleField.setEditable(false);
								JButton titleButton = new JButton("x");
								titleButton.addActionListener(new ActionListener() {
									@Override
									public void actionPerformed(ActionEvent arg0) {
										Main.vecEdit.sheets.remove(Main.vecEdit.sheets.indexOfTabComponent(titleButton.getParent()));
									}
								});
								titlePanel.add(titleField);
								titlePanel.add(titleButton);
								Main.vecEdit.sheets.setTabComponentAt(Main.vecEdit.sheets.getTabCount() - 2, titlePanel);
							}
							line = readLine(input);
						}
					}
					line = readLine(input);
				}
				Main.vecEdit.sheets.setSelectedIndex(0);
			}
		} catch (FileNotFoundException e) {
			JOptionPane.showMessageDialog(getParent(), "Error opening file!  File location is invalid.", "File Open Error", JOptionPane.ERROR_MESSAGE);
			e.printStackTrace();
		}
	}
	
	private String readLine(FileReader input)
	{
		String line = "";
		try {
			int c = input.read();
			while((c != '\n') && (c != -1)) {
				line += (char) c;
				c = input.read();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return line;
	}
}
